{"floor" {:description "find the nearest integer less than or equal to the parameter", :params [{:name "x", :description "Specify the value to evaluate."}]}, "textureProjLod" {:description "perform a texture lookup with projection and explicit level-of-detail", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "lod", :description "Specifies the explicit level-of-detail from which to fetch texels."}]}, "ceil" {:description "find the nearest integer that is greater than or equal to the parameter", :params [{:name "x", :description "Specify the value to evaluate."}]}, "unpackUnorm2x16, unpackSnorm2x16" {:description "unpack floating-point values from an unsigned integer", :params [{:name "p", :description "Specifies an unsigned integer containing packed floating-point values."}]}, "gl_FragCoord" {:description "contains the window-relative coordinates of the current fragment", :params []}, "cosh" {:description "return the hyperbolic cosine of the parameter", :params [{:name "x", :description "Specify the value whose hyperbolic cosine to return."}]}, "inversesqrt" {:description "return the inverse of the square root of the parameter", :params [{:name "x", :description "Specify the value of which to take the inverse of the square root."}]}, "min" {:description "return the lesser of two values", :params [{:name "x", :description "Specify the first value to compare."} {:name "y", :description "Specify the second value to compare."}]}, "matrixCompMult" {:description "perform a component-wise multiplication of two matrices", :params [{:name "x", :description "Specifies the first matrix multiplicand."} {:name "y", :description "Specifies the second matrix multiplicand."}]}, "isinf" {:description "determine whether the parameter is positive or negative infinity", :params [{:name "x", :description "Specifies the value to test for infinity."}]}, "normalize" {:description "calculate the normalize product of two vectors", :params [{:name "v", :description "Specifies the vector to normalize."}]}, "textureProjOffset" {:description "perform a texture lookup with projection and offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which the texture will be sampled."} {:name "offset", :description "Specifies the offset that is applied to"} {:name "bias", :description "Specifies an optional bias to be applied during level-of-detail computation."}]}, "notEqual" {:description "perform a component-wise not-equal-to comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "textureLod" {:description "perform a texture lookup with explicit level-of-detail", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "lod", :description "Specifies the explicit level-of-detail"}]}, "roundEven" {:description "find the nearest even integer to the parameter", :params [{:name "x", :description "Specify the value to evaluate."}]}, "refract" {:description "calculate the refraction direction for an incident vector", :params [{:name "I", :description "Specifies the incident vector."} {:name "N", :description "Specifies the normal vector."} {:name "eta", :description "Specifies the ratio of indices of refraction."}]}, "greaterThan" {:description "perform a component-wise greater-than comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "not" {:description "logically invert a boolean vector", :params [{:name "x", :description "Specifies the vector to be inverted."}]}, "gl_InstanceID" {:description "contains the index of the current primitive in an instanced draw command", :params []}, "texture" {:description "retrieves texels from a texture", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "bias", :description "Specifies an optional bias to be applied during level-of-detail computation."}]}, "fract" {:description "compute the fractional part of the argument", :params [{:name "x", :description "Specify the value to evaluate."}]}, "determinant" {:description "calculate the determinant of a matrix", :params [{:name "m", :description "Specifies the matrix of which to take the determinant."}]}, "dot" {:description "calculate the dot product of two vectors", :params [{:name "x", :description "Specifies the first of two vectors"} {:name "y", :description "Specifies the second of two vectors"}]}, "fwidth" {:description "return the sum of the absolute derivatives in x and y", :params [{:name "p", :description "Specifies the expression of which to take the partial derivative."}]}, "textureLodOffset" {:description "perform a texture lookup with explicit level-of-detail and offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which the texture will be sampled."} {:name "lod", :description "Specifies the explicit level-of-detail from which texels will be fetched."} {:name "offset", :description "Specifies the offset that will be applied to"}]}, "cross" {:description "calculate the cross product of two vectors", :params [{:name "x", :description "Specifies the first of two vectors"} {:name "y", :description "Specifies the second of two vectors"}]}, "unpackHalf2x16" {:description "convert two 16-bit floating-point values packed into a single 32-bit integer into a vector of two 32-bit floating-point quantities", :params [{:name "v", :description "Specify a single 32-bit unsigned integer values that contains two 16-bit floating point values to be unpacked."}]}, "max" {:description "return the greater of two values", :params [{:name "x", :description "Specify the first value to compare."} {:name "y", :description "Specify the second value to compare."}]}, "gl_FragDepth" {:description "establishes a depth value for the current fragment", :params []}, "textureProjGrad" {:description "perform a texture lookup with projection and explicit gradients", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "dPdx", :description "Specifies the partial derivative of"} {:name "dPdy", :description "Specifies the partial derivative of"}]}, "isnan" {:description "determine whether the parameter is a number", :params [{:name "x", :description "Specifies the value to test for NaN."}]}, "reflect" {:description "calculate the reflection direction for an incident vector", :params [{:name "I", :description "Specifies the incident vector."} {:name "N", :description "Specifies the normal vector."}]}, "pow" {:description "return the value of the first parameter raised to the power of the second", :params [{:name "x", :description "Specify the value to raise to the power"} {:name "y", :description "Specify the power to which to raise"}]}, "degrees" {:description "convert a quantity in radians to degrees", :params [{:name "radians", :description "Specify the quantity, in radians, to be converted to degrees."}]}, "texelFetch" {:description "perform a lookup of a single texel within a texture", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "lod", :description "If present, specifies the level-of-detail within the texture from which the texel will be fetched."}]}, "lessThanEqual" {:description "perform a component-wise less-than-or-equal comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "atan" {:description "return the arc-tangent of the parameters", :params [{:name "y", :description "Specify the numerator of the fraction whose arctangent to return."} {:name "x", :description "Specify the denominator of the fraction whose arctangent to return."} {:name "y_over_x", :description "Specify the fraction whose arctangent to return."}]}, "textureProj" {:description "perform a texture lookup with projection", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "bias", :description "Specifies an optional bias to be applied during level-of-detail computation."}]}, "log" {:description "return the natural logarithm of the parameter", :params [{:name "x", :description "Specify the value of which to take the natural logarithm."}]}, "packUnorm2x16, packSnorm2x16" {:description "pack floating-point values into an unsigned integer", :params [{:name "v", :description "Specifies a vector of values to be packed into an unsigned integer."}]}, "acosh" {:description "return the arc hyperbolic cosine of the parameter", :params [{:name "x", :description "Specify the value whose arc hyperbolic cosine to return."}]}, "gl_PointCoord" {:description "contains the coordinate of a fragment within a point", :params []}, "textureGradOffset" {:description "perform a texture lookup with explicit gradients and offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "dPdx", :description "Specifies the partial derivative of"} {:name "dPdy", :description "Specifies the partial derivative of"} {:name "offset", :description "Specifies the offset to be applied to the texture coordinates before sampling."}]}, "any" {:description "check whether any element of a boolean vector is true", :params [{:name "x", :description "Specifies the vector to be tested for truth."}]}, "gl_PointSize" {:description "contains size of rasterized points, in pixels", :params []}, "sin" {:description "return the sine of the parameter", :params [{:name "angle", :description "Specify the quantity, in radians, of which to return the sine."}]}, "textureProjLodOffset" {:description "perform a texture lookup with projection and explicit level-of-detail and offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "lod", :description "Specifies the explicit level-of-detail from which to fetch texels."} {:name "offset", :description "Specifies the offset, in texels, to be applied to"}]}, "radians" {:description "convert a quantity in degrees to radians", :params [{:name "degrees", :description "Specify the quantity, in degrees, to be converted to radians."}]}, "exp" {:description "return the natural exponentiation of the parameter", :params [{:name "x", :description "Specify the value to exponentiate."}]}, "gl_Position" {:description "contains the position of the current vertex", :params []}, "textureGrad" {:description "perform a texture lookup with explicit gradients", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "dPdx", :description "Specifies the partial derivative of"} {:name "dPdy", :description "Specifies the partial derivative of"}]}, "clamp" {:description "constrain a value to lie between two further values", :params [{:name "x", :description "Specify the value to constrain."} {:name "minVal", :description "Specify the lower end of the range into which to constrain"} {:name "maxVal", :description "Specify the upper end of the range into which to constrain"}]}, "distance" {:description "calculate the distance between two points", :params [{:name "p0", :description "Specifies the first of two points"} {:name "p1", :description "Specifies the second of two points"}]}, "sqrt" {:description "return the square root of the parameter", :params [{:name "x", :description "Specify the value of which to take the square root."}]}, "inverse" {:description "calculate the inverse of a matrix", :params [{:name "m", :description "Specifies the matrix of which to take the inverse."}]}, "texelFetchOffset" {:description "perform a lookup of a single texel within a texture with an offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "lod", :description "If present, specifies the level-of-detail within the texture from which the texel will be fetched."} {:name "offset", :description "Specifies offset, in texels that will be applied to"}]}, "length" {:description "calculate the length of a vector", :params [{:name "x", :description "Specifies a vector of which to calculate the length."}]}, "tan" {:description "return the tangent of the parameter", :params [{:name "angle", :description "Specify the quantity, in radians, of which to return the tangent."}]}, "cos" {:description "return the cosine of the parameter", :params [{:name "angle", :description "Specify the quantity, in radians, of which to return the cosine."}]}, "lessThan" {:description "perform a component-wise less-than comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "trunc" {:description "find the truncated value of the parameter", :params [{:name "x", :description "Specify the value to evaluate."}]}, "outerProduct" {:description "calculate the outer product of a pair of vectors", :params [{:name "c", :description "Specifies the parameter to be treated as a column vector."} {:name "r", :description "Specifies the parameter to be treated as a row vector."}]}, "mod" {:description "compute value of one parameter modulo another", :params [{:name "x", :description "Specify the value to evaluate."}]}, "intBitsToFloat, uintBitsToFloat" {:description "produce a floating point using an encoding supplied as an integer", :params [{:name "x", :description "Specifies the bit encoding to return as a floating point value."}]}, "greaterThanEqual" {:description "perform a component-wise greater-than-or-equal comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "abs" {:description "return the absolute value of the parameter", :params [{:name "x", :description "Specify the value of which to return the absolute."}]}, "textureProjGradOffset" {:description "perform a texture lookup with projection, explicit gradients and offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "dPdx", :description "Specifies the partial derivative of"} {:name "dPdy", :description "Specifies the partial derivative of"} {:name "offset", :description "Specifies the offsets, in texels at which the texture will be sampled relative to the projection of"}]}, "floatBitsToInt" {:description "produce the encoding of a floating point value as an integer", :params [{:name "x", :description "Specifies the value whose floating point encoding to return."}]}, "exp2" {:description "return 2 raised to the power of the parameter", :params [{:name "x", :description "Specify the value of the power to which 2 will be raised."}]}, "gl_VertexID" {:description "contains the index of the current vertex", :params []}, "packHalf2x16" {:description "convert two 32-bit floating-point quantities to 16-bit quantities and pack them into a single 32-bit integer", :params [{:name "v", :description "Specify a vector of two 32-bit floating point values that are to be converted to 16-bit representation and packed into the result."}]}, "all" {:description "check whether all elements of a boolean vector are true", :params [{:name "x", :description "Specifies the vector to be tested for truth."}]}, "atanh" {:description "return the arc hyperbolic tangent of the parameter", :params [{:name "x", :description "Specify the value whose arc hyperbolic tangent to return."}]}, "dFdx, dFdy" {:description "return the partial derivative of an argument with respect to x or y", :params [{:name "p", :description "Specifies the expression of which to take the partial derivative."}]}, "textureSize" {:description "retrieve the dimensions of a level of a texture", :params [{:name "sampler", :description "Specifies the sampler to which the texture whose dimensions to retrieve is bound."} {:name "lod", :description "Specifies the level of the texture for which to retrieve the dimensions."}]}, "gl_FrontFacing" {:description "indicates whether a primitive is front or back facing", :params []}, "mix" {:description "linearly interpolate between two values", :params [{:name "x", :description "Specify the start of the range in which to interpolate."} {:name "y", :description "Specify the end of the range in which to interpolate."} {:name "a", :description "Specify the value to use to interpolate between"}]}, "sinh" {:description "return the hyperbolic sine of the parameter", :params [{:name "x", :description "Specify the value whose hyperbolic sine to return."}]}, "equal" {:description "perform a component-wise equal-to comparison of two vectors", :params [{:name "x", :description "Specifies the first vector to be used in the comparison operation."} {:name "y", :description "Specifies the second vector to be used in the comparison operation."}]}, "asinh" {:description "return the arc hyperbolic sine of the parameter", :params [{:name "x", :description "Specify the value whose arc hyperbolic sine to return."}]}, "round" {:description "find the nearest integer to the parameter", :params [{:name "x", :description "Specify the value to evaluate."}]}, "faceforward" {:description "return a vector pointing in the same direction as another", :params [{:name "N", :description "Specifies the vector to orient."} {:name "I", :description "Specifies the incident vector."} {:name "Nref", :description "Specifies the reference vector."}]}, "asin" {:description "return the arcsine of the parameter", :params [{:name "x", :description "Specify the value whose arcsine to return."}]}, "sign" {:description "extract the sign of the parameter", :params [{:name "x", :description "Specify the value from which to extract the sign."}]}, "transpose" {:description "calculate the transpose of a matrix", :params [{:name "m", :description "Specifies the matrix of which to take the transpose."}]}, "tanh" {:description "return the hyperbolic tangent of the parameter", :params [{:name "x", :description "Specify the value whose hyperbolic tangent to return."}]}, "textureOffset" {:description "perform a texture lookup with offset", :params [{:name "sampler", :description "Specifies the sampler to which the texture from which texels will be retrieved is bound."} {:name "P", :description "Specifies the texture coordinates at which texture will be sampled."} {:name "offset", :description "Specifies offset, in texels that will be applied to"} {:name "bias", :description "Specifies an optional bias to be applied during level-of-detail computation."}]}, "log2" {:description "return the base 2 logarithm of the parameter", :params [{:name "x", :description "Specify the value of which to take the base 2 logarithm."}]}, "modf" {:description "separate a value into its integer and fractional components", :params [{:name "x", :description "Specify the value to separate."} {:name "out i", :description "A variable that receives the integer part of the argument."}]}, "step" {:description "generate a step function by comparing two values", :params [{:name "edge", :description "Specifies the location of the edge of the step function."} {:name "x", :description "Specify the value to be used to generate the step function."}]}, "smoothstep" {:description "perform Hermite interpolation between two values", :params [{:name "edge0", :description "Specifies the value of the lower edge of the Hermite function."} {:name "edge1", :description "Specifies the value of the upper edge of the Hermite function."} {:name "x", :description "Specifies the source value for interpolation."}]}, "acos" {:description "return the arccosine of the parameter", :params [{:name "x", :description "Specify the value whose arccosine to return."}]}}